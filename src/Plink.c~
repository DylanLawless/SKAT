#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <R.h>
#include <Rmath.h>
#include <math.h>

#define MAX_SNP_NAME_LEN 50
#define MASK1 0b01101100
#define MASK2 0b00011011
#define MODE 0


typedef struct _locus {
	
	int chr;
	char name[MAX_SNP_NAME_LEN];

	double pos;	// genetic position
	int bp;		// base-pair 
	int nm;		// # of non missing
	double freq; 	// of allele1
	
	char allele1;
	char allele2;

} locus;

FILE  	*pFILE_bPed;
int	IsOpen;		
int	nSample;
int	nSNPs;
int	OnMemory;
char  * DATA; 
char 	buffer_SNP[500000];
char	MASK[8]={1,2,4,8,16,32,64,128}


int 	GetTotalSize(n,p){
	
	int temp;
	temp = (int)((double)p /4);
	if(temp * 4 < n){
		temp = temp +1;
	}
	
	return temp*n ;

}

void	ReadAllData(){
	
	int TotalSize ;
	TotalSize = GetTotalSize(nSample,nSNPs);

	DATA = (char *)R_alloc(TotalSize, 1);	
  	temp = fread ( OUT, sizeof(char) , TotalSize, pFILE_bPed );
  	if(temp !=   TotalSize){
    		Rprintf("Error: file read size [%d][%d]!\n",TotalSize, temp);
		CloseBPedFile();
		exit(1);
  	}
	CloseBPedFile();
}

void	OpenBPedFile(char ** FileName, int * n, int * p, int * pMemoryMode, int *ErrorCode){

	char * file = FileName[0];	
	char buffer[4];
	OnMemory = 1;
	if(IsOpen){
		CloseBPedFile();
	}	
	
	bFilePed = fopen(file,"r");
	if(pFILE_bPed == NULL){
		Rprintf("Error: file open [%s]!\n",file);
		exit(1);
	}
	IsOpen= 1;

	nSample = *n;
	nSNPs	= *p;
	
	/* Read First 2 byte */
	fread ( buffer, 3, 3, bFilePed );

	/* check version */
	if(buffer[0] != MASK1 || buffer[1] != MASK2){
		Rprintf("Error: Different magic number [%d][%d]!\n",buffer[0],buffer[1]);
		exit(1);		
	}
	if(buffer[3] != MODE){
		Rprintf("Error: Bed file is not in SNP major mode \n");
		exit(1);		
	}

	/* Read All Files */
	ReadAllData();

}


void	CloseBPedFile(){
	if(pFILE_bPed == NULL){
		fclose(pFILE_bPed);
	}
	IsOpen= 0;	
}

void	GetSNPSets(int * nSet, int * index_set, int * buffer){

	int i;
	int index;
	p1 = (int)((double)nSNP /4);
	if(p1 * 4 < nSample){
		p1 = p1 +1;
	}
	for(i=0;i< *nSet;i++){
		

	}

}

void	GetSNP(int index, int * buffer){

	int p1,start,end;
	int i,j,total_i;
	int n1, n2;
	char temp,temp1,temp2;

	p1 = (int)((double)nSNP /4);
	if(p1 * 4 < nSample){
		p1 = p1 +1;
	}

	start = (index -1 ) * p1 ;
	total_i = 0
	for(i=0;i<p1;i++){
		temp = DATA[start + i];
		for(j=0;j<4;j++){
			temp2 = temp & 	MASK[(j-1)*2];
			temp1 = temp & 	MASK[(j-1)*2 + 1];
			if(temp1 == 0 && temp2 == 0){		
				buffer[total_i] = 0; 
				n1 = n1+2;
			} else if (temp1 == 1 && temp2 == 1){		
				buffer[total_i] = 2;
				n2 = n2+2;
			} else if (temp1 == 0 && temp2 == 1){		
				buffer[total_i] = 1;
				n1++;n2++;
			} else if (temp1 == 1 && temp2 == 0){		
				buffer[total_i] = 9
			}
			if(total_i >= nSample)
				break;
			total_i++;
		}
	}

	if(n2 > n1){
		for(i=0;i<nSample;i++){
			if(buffer[i] == 0){
				buffer[i] = 2;
			} else if(buffer[i] == 2){
				buffer[i] = 0;
			}
		}
	}

}

